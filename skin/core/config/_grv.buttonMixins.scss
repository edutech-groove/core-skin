@import "./grv.flexboxMixins";

@mixin coreButton($svgColorType:'fill') {
    background-image: none;
    border: 0;
    box-shadow: none !important;
    border-radius: $globalRadius1;
    line-height: 1.4;
    text-shadow: none;
    font-weight: 400;
    transition: none;
    text-align: center;
    text-decoration: none;
    letter-spacing: 0;
    min-width: unset !important;
    min-height: unset !important;
    display: inline-block;
    box-sizing: border-box;
    -webkit-font-smoothing: auto;
    cursor: pointer;

    .btn-content {
        @include flexbox;
        @include align-items(center);
        @include justify-content(center);

        svg {
            margin-right: 5px;
        }
    }

    svg {
        height: 14px;
        width: unset;
    }

    &:not([disabled]):not(.disabled) {
        &:hover {
            box-shadow: none !important;
            background-image: none !important;
            color: $color01 !important;

            @if ($svgColorType == 'fill') {
                svg {
                    fill: $color01;
                    stroke: none;

                    * {
                        fill: $color01;
                        stroke: none;
                    }
                }
            } @else if ($svgColorType == 'stroke') {
                svg {
                    stroke: $color01;
                    fill: none;

                    * {
                        stroke: $color01;
                        fill: none;
                    }
                }
            }
        }
    }

    &:active,
    &:focus {
        box-shadow: none !important;
        color: $color01;
        outline: none;

        @if ($svgColorType == 'fill') {
            svg {
                fill: $color01;
                stroke: none;

                * {
                    fill: $color01;
                    stroke: none;
                }
            }
        } @else if ($svgColorType == 'stroke') {
            svg {
                stroke: $color01;
                fill: none;

                * {
                    stroke: $color01;
                    fill: none;
                }
            }
        }
    }

    &:disabled,
    &.disabled,
    &.is-disabled {
        background-color: $disabledBtnBackground !important;
        color: $disabledBtnColor !important;

        @if ($svgColorType == 'fill') {
            svg {
                fill: $disabledBtnColor;
                stroke: none;

                * {
                    fill: $disabledBtnColor;
                    stroke: none;
                }
            }
        } @else if ($svgColorType == 'stroke') {
            svg {
                stroke: $disabledBtnColor;
                fill: none;

                * {
                    stroke: $disabledBtnColor;
                    fill: none;
                }
            }
        }
    }
}

@mixin usePrimaryButtonStyle($svgColorType:'fill') {
    background-color: $primaryDarkBtnBackground !important;
    color: $primaryDarkBtnColor;
    border: 1px solid $primaryDarkBtnBorder;
    @include coreButton($svgColorType);

    @if ($svgColorType == 'fill') {
        svg {
            fill: $primaryDarkBtnColor;
            stroke: none;

            * {
                fill: $primaryDarkBtnColor;
                stroke: none;
            }
        }
    } @else if ($svgColorType == 'stroke') {
        svg {
            stroke: $primaryDarkBtnColor;
            fill: none;

            * {
                stroke: $primaryDarkBtnColor;
                fill: none;
            }
        }
    }

    &:not([disabled]):not(.disabled) {
        &:hover {
            background-color: $primaryDarkBtnBackgroundHover !important;
        }
    }

    &:active,
    &:focus {
        background-color: $primaryDarkBtnBackgroundHover !important;
    }
}

@mixin useSecondaryButtonStyle($svgColorType:'fill') {
    background-color: $primaryLightBtnBackground !important;
    color: $primaryLightBtnColor;
    border: 1px solid $primaryLightBtnBorder;
    @include coreButton($svgColorType);

    @if ($svgColorType == 'fill') {
        svg {
            fill: $primaryLightBtnColor;
            stroke: none;

            * {
                fill: $primaryLightBtnColor;
                stroke: none;
            }
        }
    } @else if ($svgColorType == 'stroke') {
        svg {
            stroke: $primaryLightBtnColor;
            fill: none;

            * {
                stroke: $primaryLightBtnColor;
                fill: none;
            }
        }
    }

    &:not([disabled]):not(.disabled) {

        &:hover,
        &.is-hovered {
            background-color: $primaryLightBtnBackgroundHover !important;
        }
    }

    &:active,
    &:focus {
        background-color: $primaryLightBtnBackgroundHover !important;
    }
}

@mixin usePrimaryYellowButtonStyle($svgColorType:'fill') {
    background-color: $secondaryDarkBtnBackground !important;
    color: $secondaryDarkBtnColor;
    border: 1px solid $secondaryDarkBtnBorder;
    @include coreButton($svgColorType);

    @if ($svgColorType == 'fill') {
        svg {
            fill: $secondaryDarkBtnColor;
            stroke: none;

            * {
                fill: $secondaryDarkBtnColor;
                stroke: none;
            }
        }
    } @else if ($svgColorType == 'stroke') {
        svg {
            stroke: $secondaryDarkBtnColor;
            fill: none;

            * {
                stroke: $secondaryDarkBtnColor;
                fill: none;
            }
        }
    }

    &:not([disabled]):not(.disabled) {
        &:hover {
            background-color: $secondaryDarkBtnBackgroundHover !important;
        }
    }

    &:active,
    &:focus {
        background-color: $secondaryDarkBtnBackgroundHover !important;
    }
}

@mixin useSecondaryYellowButtonStyle($svgColorType:'fill') {
    background-color: $secondaryLightBtnBackground !important;
    color: $secondaryLightBtnColor;
    border: 1px solid $secondaryLightBtnBorder;
    @include coreButton($svgColorType);

    @if ($svgColorType == 'fill') {
        svg {
            fill: $secondaryLightBtnColor;
            stroke: none;

            * {
                fill: $secondaryLightBtnColor;
                stroke: none;
            }
        }
    } @else if ($svgColorType == 'stroke') {
        svg {
            stroke: $secondaryLightBtnColor;
            fill: none;

            * {
                stroke: $secondaryLightBtnColor;
                fill: none;
            }
        }
    }

    &:not([disabled]):not(.disabled) {

        &:hover,
        &.is-hovered {
            background-color: $secondaryLightBtnBackgroundHover !important;
        }
    }

    &:active,
    &:focus {
        background-color: $secondaryLightBtnBackgroundHover !important;
    }
}

@mixin useDangerButtonStyle($svgColorType:'fill') {
    background-color: $color21 !important;
    color: $color01;
    @include coreButton($svgColorType);

    @if ($svgColorType == 'fill') {
        svg {
            fill: $color01;
            stroke: none;

            * {
                fill: $color01;
                stroke: none;
            }
        }
    } @else if ($svgColorType == 'stroke') {
        svg {
            stroke: $color01;
            fill: none;

            * {
                stroke: $color01;
                fill: none;
            }
        }
    }

    &:not([disabled]):not(.disabled) {

        &:hover,
        &.is-hovered {
            background-color: darken($color21, 10%) !important;
        }
    }

    &:active,
    &:focus {
        background-color: darken($color21, 10%) !important;
    }
}

@mixin useDangerTransparentButtonStyle($svgColorType:'fill') {
    background-color: transparent !important;
    color: $color21;
    @include coreButton($svgColorType);

    @if ($svgColorType == 'fill') {
        svg {
            fill: $color21;
            stroke: none;

            * {
                fill: $color21;
                stroke: none;
            }
        }
    } @else if ($svgColorType == 'stroke') {
        svg {
            stroke: $color21;
            fill: none;

            * {
                stroke: $color21;
                fill: none;
            }
        }
    }

    &:not([disabled]):not(.disabled) {
        &:active,
        &:focus,
        &:hover,
        &.is-hovered {
            color: darken($color21, 10%) !important;

            @if ($svgColorType == 'fill') {
                svg {
                    fill: darken($color21, 10%) !important;
                    stroke: none;

                    * {
                        fill: darken($color21, 10%) !important;
                        stroke: none;
                    }
                }
            } @else if ($svgColorType == 'stroke') {
                svg {
                    stroke: darken($color21, 10%) !important;
                    fill: none;

                    * {
                        stroke: darken($color21, 10%) !important;
                        fill: none;
                    }
                }
            }
        }
    }
}

@mixin useButtonSmall() {
    @include fz(13);
    box-shadow: none;
    height: 38px;
    line-height: 36px;
    padding: 0 1rem;
  }
  
  @mixin useCMSPrimaryStyle {
    @include usePrimaryButtonStyle('fill');
    @include fzCMS(15);
    padding: 8px 20px !important;
  
    &.disabled,
    &.is-disabled,
    &:disabled {
      background-color: theme-color("primary") !important;
      border-color: theme-color("primary") !important;
      opacity: 0.7;
    }
  }
  
  @mixin useCMSSecondaryStyle {
    @include useSecondaryButtonStyle('fill');
    @include fzCMS(15);
    padding: 8px 20px !important;
  
    &.disabled,
    &.is-disabled,
    &:disabled {
      background-color: $color01 !important;
      border-color: theme-color("primary") !important;
      opacity: 0.7;
    }
  }

@mixin useGrvPrimaryButtonStyle($cms: false, $svgColorType: 'fill') {
    @include usePrimaryButtonStyle($svgColorType);
    padding: 8px 20px !important;
    @if ($cms) {
        @include fzCMS(15);
      } @else {
        @include fz(15);
      }
}

@mixin useGrvSecondaryButtonStyle($cms: false, $svgColorType: 'fill') {
    @include useSecondaryButtonStyle($svgColorType);
    padding: 8px 20px !important;
    @if ($cms) {
      @include fzCMS(15);
    } @else {
      @include fz(15);
    }
}

@mixin useGrvPrimaryButtonStyleLarge($cms: false, $svgColorType: 'fill') {
  @include usePrimaryButtonStyle($svgColorType);
  padding: 10px 27px !important;
  @if ($cms) {
    @include fzCMS(15);
  } @else {
    @include fz(15);
  }
}

@mixin useGrvSecondaryButtonStyleLarge($cms: false, $svgColorType: 'fill') {
    @include useSecondaryButtonStyle($svgColorType);
    padding: 10px 27px !important;
    @if ($cms) {
      @include fzCMS(15);
    } @else {
      @include fz(15);
    }
}

@mixin useGrvPrimaryButtonStyleSmall($cms: false, $svgColorType: 'fill') {
  @include usePrimaryButtonStyle($svgColorType);
  padding: 5px 7px !important;
  @if ($cms) {
    @include fzCMS(15);
  } @else {
    @include fz(15);
  }
}

@mixin useGrvSecondaryButtonStyleSmall($cms: false, $svgColorType: 'fill') {
  @include useSecondaryButtonStyle($svgColorType);
  padding: 5px 7px !important;
  @if ($cms) {
    @include fzCMS(15);
  } @else {
    @include fz(15);
  }
}

/// yellow

@mixin useGrvPrimaryYellowButtonStyle($cms: false, $svgColorType: 'fill') {
  @include usePrimaryYellowButtonStyle($svgColorType);
  padding: 8px 20px !important;
  @if ($cms) {
    @include fzCMS(15);
  } @else {
    @include fz(15);
  }
}

@mixin useGrvSecondaryYellowButtonStyle($cms: false, $svgColorType: 'fill') {
  @include useSecondaryYellowButtonStyle($svgColorType);
  padding: 8px 20px !important;
  @if ($cms) {
    @include fzCMS(15);
  } @else {
    @include fz(15);
  }
}

@mixin useGrvPrimaryYellowButtonStyleLarge($cms: false, $svgColorType: 'fill') {
  @include usePrimaryYellowButtonStyle($svgColorType);
  padding: 10px 27px !important;
  @if ($cms) {
    @include fzCMS(15);
  } @else {
    @include fz(15);
  }
}

@mixin useGrvSecondaryYellowButtonStyleLarge($cms: false, $svgColorType: 'fill') {
  @include useSecondaryYellowButtonStyle($svgColorType);
  padding: 10px 27px !important;
  @if ($cms) {
    @include fzCMS(15);
  } @else {
    @include fz(15);
  }
}

@mixin useGrvPrimaryYellowButtonStyleSmall($cms: false, $svgColorType: 'fill') {
  @include usePrimaryYellowButtonStyle($svgColorType);
  padding: 5px 7px !important;
  @if ($cms) {
    @include fzCMS(15);
  } @else {
    @include fz(15);
  }
}

@mixin useGrvSecondaryYellowButtonStyleSmall($cms: false, $svgColorType: 'fill') {
  @include useSecondaryYellowButtonStyle($svgColorType);
  padding: 5px 7px !important;
  @if ($cms) {
    @include fzCMS(15);
  } @else {
    @include fz(15);
  }
}

/// danger

@mixin useGrvDangerButtonStyle($cms: false, $svgColorType: 'fill') {
  @include useDangerButtonStyle($svgColorType);
  padding: 8px 20px !important;
  @if ($cms) {
    @include fzCMS(15);
  } @else {
    @include fz(15);
  }
}

@mixin useGrvDangerButtonStyleLarge($cms: false, $svgColorType: 'fill') {
  @include useDangerButtonStyle($svgColorType);
  padding: 10px 27px !important;
  @if ($cms) {
    @include fzCMS(15);
  } @else {
    @include fz(15);
  }
}

@mixin useGrvDangerButtonStyleSmall($cms: false, $svgColorType: 'fill') {
  @include useDangerButtonStyle($svgColorType);
  padding: 5px 7px !important;
  @if ($cms) {
    @include fzCMS(15);
  } @else {
    @include fz(15);
  }
}

@mixin useGrvDangerTransparentButtonStyle($cms: false, $svgColorType: 'fill') {
  @include useDangerTransparentButtonStyle($svgColorType);
  padding: 0 !important;
  @if ($cms) {
    @include fzCMS(15);
  } @else {
    @include fz(15);
  }
}

%with-primary-button-style {
  @include usePrimaryButtonStyle;
}

%with-primary-outline-button-style {
  @include useSecondaryButtonStyle;
}

// Custom mixin for Course buttons / Register
@mixin useCourseButton {
  @include usePrimaryButtonStyle;
  @include fz(16);
  background-image: none;
  display: inline-flex;
  height: 50px;
  justify-content: center;
  line-height: 48px;
  padding: 0 30px;
  text-shadow: none;
  width: auto;

  @include whenHover {
    background-image: none;
  }
}

@mixin useOauthPrimaryButton {
  @include fz(14);
  background-color: $color01;
  border-color: $grey07;
  border-radius: $globalRadius2;
  color: $textColor01;
  font-weight: 600;
  height: auto;
  letter-spacing: 0;
  line-height: 1;
  min-height: 40px;
  min-width: 200px;
  padding: 2px 0;
  text-align: center;
  text-shadow: none;
  text-transform: uppercase;
  width: 100%;
  outline: none;

  .icon {
    bottom: auto;
    color: $textColor01;
    position: relative;
    top: 0;
    width: 24px;
  }

  @include whenHover {
    background-color: $color01;
    border-color: theme-color("primary");
    color: $textColor01;
    box-shadow: none;

    .icon {
      color: $color01;
    }
  }

  @include tablet-up {
    width: 49%;

    &.button-oa2-google-oauth2 {
      margin-right: 1%;
      margin-left: 0;
    }

    &.button-oa2-azuread-oauth2 {
      margin-left: 1%;
      margin-right: 0;
    }
  }
}

@mixin useLightPinkButton {
  background-color: $color22;
  border-color: $color22;
  color: theme-color("primary");
  border-radius: $globalRadius2;

  @include whenHover {
    background-color: $color03d;
    color: $color01;
  }
}

@mixin useYellowButton {
  border: 1px solid $color25;
  background-color: $color25;
  border-radius: $globalRadius2;
  color: $color24;
  display: inline-block;
  text-decoration: none;

  @include whenHover {
    background-color: $color24;
    border-color: $color24;
    color: $color01;
  }
}

@mixin useYellowButton2 {
  border: 1px solid $color24;
  border-radius: $globalRadius2;
  background-color: $color24;
  color: $color01;
  display: inline-block;
  text-decoration: none;

  @include whenHover {
    border-color: $color25;
    background-color: $color25;
    color: $color24;
  }
}

@mixin useDangerButton {
  background-color: $color01;
  color: theme-color("danger");
  border-color: theme-color("danger");
  border-radius: $globalRadius2;

  @include whenHover {
    background-color: theme-color("danger");
    color: $color01;
  }
}

@mixin useSecondaryLink {
    color: $textColor02 !important;
    text-decoration: none;
    box-shadow: none;
    border: 0;
    outline: none;
    background-color: transparent;

    @include whenHover {
        color: theme-color("primary") !important;
        box-shadow: none;
    }

}

@mixin usePrimaryLink {
    color: theme-color("primary") !important;
    text-decoration: none;
    box-shadow: none;
    border: 0;
    outline: none;
    background-color: transparent;

    svg {
      fill: theme-color("primary");
    }
    
    @include whenHover {
        text-decoration: underline;
        box-shadow: none;
    }

}

@mixin useBlueLink($svgColorType: 'fill') {
    color: $grvColor06 !important;
    text-decoration: none;
    background-color: transparent !important;
    box-shadow: none !important;
    border: 0;
    margin: 0;
    padding: 0;
    outline: none;
    background-color: transparent;
    font-weight: 300 !important;
    text-align: left;
    display: contents;

    .btn-content {
        @include flexbox;
        @include align-items(center);

        svg {
            margin-right: 5px;
        }
    }

    svg {
        margin-left: 5px;
        width: auto;
        height: 12px;
        
        @if ($svgColorType == 'fill') {
            fill: $grvColor06;
            stroke: none;

            * {
                fill: $grvColor06;
                stroke: none;
            }
        } @else if ($svgColorType == 'stroke') {
            stroke: $grvColor06;
            fill: none;

            * {
                stroke: $grvColor06;
                fill: none;
            }
        }
    }

    @include whenHover {
        color: $grvColor06;
        text-decoration: underline !important;
        box-shadow: none !important;
        font-weight: 300 !important;
    }

}

@mixin usePrimaryCheckbox($cms: false) {
    display: none;

    &+* {
        position: relative;
        min-height: 16px;
        margin-bottom: 0;
        line-height: 1.2;
        @include useFont1;
        font-weight: 400;
        color: $textColor01;
        cursor: pointer;
        display: flex !important;
        @if ($cms) {
          @include fzCMS(15);
        } @else {
          @include fz(15);
        }

        &:not(:empty) {
            &::before {
                margin-right: 10px;
            }
        }

        &::before,
        &::after {
            content: '';
            display: block;
            transition: all .2s ease-in-out;
            min-height: unset;
            max-height: unset;
            min-width: unset;
            max-width: unset;
        }

        &::before {
            width: 16px;
            height: 16px;
            min-width: 16px;
            background-color: $checkboxBackground;
            border: 1px solid $checkboxBorder;
            border-radius: 4px;
        }

        &::after {
            position: absolute;
            top: 0;
            left: 0;
            width: 16px;
            height: 10px;
            min-width: 16px;
            top: 2px;
            border-left: 3px solid $checkboxColor;
            border-bottom: 3px solid $checkboxColor;
            opacity: 0;
        }
    }

    &:checked {
        &+* {
            &::before {
                background-color: $checkedCheckboxBackground;
                border-color: $checkedCheckboxBorder;
            }

            &::after {
                transform: rotate(-45deg) scale(0.6);
                opacity: 1;
                border-left-color: $checkedCheckboxColor;
                border-bottom-color: $checkedCheckboxColor;
            }
        }
    }

    &:disabled {
        &+* {
            &::before {
                background-color: $disabledCheckboxBackground;
                border-color: $disabledCheckboxBorder;
            }

            &::after {
                border-left-color: $disabledCheckboxColor;
                border-bottom-color: $disabledCheckboxColor;
            }
        }
    }
}

@mixin usePrimaryRadio($cms: false) {
    display: none;

    &+* {
        position: relative;
        min-height: 16px;
        margin-bottom: 0;
        line-height: 1.2;
        @include useFont1;
        font-weight: 400;
        color: $textColor01;
        cursor: pointer;
        display: flex !important;
        @if ($cms) {
          @include fzCMS(15);
        } @else {
          @include fz(15);
        }

        &:not(:empty) {
            &::before {
                margin-right: 10px;
            }
        }

        &::before,
        &::after {
            content: '';
            display: block;
            width: 16px;
            height: 16px;
            min-width: 16px;
            border-radius: $globalRadius2;
            transition: all .2s ease-in-out;
            min-height: unset;
            max-height: unset;
            min-width: unset;
            max-width: unset;
        }

        &::before {
            background-color: $checkboxBackground;
            border: 1px solid $checkboxBorder;
        }

        &::after {
            position: absolute;
            top: 0;
            left: 0;
            background-color: $checkboxColor;
            border: 1px solid $checkboxColor;
            opacity: 0;
        }
    }

    &:checked {
        &+* {
            &::before {
                background-color: $checkedCheckboxBackground;
                border-color: $checkedCheckboxBorder;
            }

            &::after {
                transform: scale(0.4);
                opacity: 1;
            }

            &::after {
                background-color: $checkedCheckboxColor;
                border-color: $checkedCheckboxColor;
            }
        }
    }

    &:disabled {
        &+* {
            &::before {
                background-color: $disabledCheckboxBackground;
                border-color: $disabledCheckboxBorder;
            }

            &::after {
                background-color: $disabledCheckboxColor;
                border-color: $disabledCheckboxColor;
            }
        }
    }
}

@mixin useSecondaryRadio($cms: false) {
    display: none;

    &+* {
        position: relative;
        min-height: 16px;
        margin-bottom: 0;
        line-height: 1.2;
        @include useFont1;
        font-weight: 400;
        color: $textColor01;
        cursor: pointer;
        display: flex !important;
        @if ($cms) {
          @include fzCMS(15);
        } @else {
          @include fz(15);
        }

        &:not(:empty) {
            &::before {
                margin-right: 10px;
            }
        }

        &::before {
            content: '';
            display: block;
            transition: all .2s ease-in-out;
            min-height: unset;
            max-height: unset;
            min-width: unset;
            max-width: unset;
            width: 18px;
            height: 11px;
            border-left: 3px solid theme-color("primary");
            border-bottom: 3px solid theme-color("primary");
            opacity: 0;
        }
    }

    &:checked {
        &+* {
            &::before {
                transform: rotate(-45deg) scale(0.6);
                opacity: 1;
            }
        }
    }
}

@mixin usePrimaryToggle {
    display: none;

    &+* {
        position: relative;
        width: 44px;
        height: 24px;
        margin-bottom: 0;
        cursor: pointer;

        &::before,
        &::after {
            content: '';
            position: absolute;
            border-radius: $globalRadius2;
            transition: all .2s ease-in-out;
            min-height: unset;
            max-height: unset;
            min-width: unset;
            max-width: unset;
        }

        &::before {
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            background-color: $dangerColor;
        }

        &::after {
            width: 16px;
            height: 16px;
            top: 4px;
            left: 4px;
            background-color: $color01;
        }
    }

    &:checked {
        &+* {
            &::before {
                background-color: $successColor;
            }

            &::after {
                left: 24px;
            }
        }
    }

    &:disabled {
        &+* {
            &::before {
                background-color: $disabledCheckboxBackground;
            }
        }
    }
}

@mixin useBlockMultiSelect {
    display: block;

    .btn-group {
        width: 100%;

        .multiselect {
            display: block;
        }
    }
}